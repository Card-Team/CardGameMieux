//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Script/Input/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""b8d973d7-20df-4fcf-96f2-076a41d5e05e"",
            ""actions"": [
                {
                    ""name"": ""Card Play"",
                    ""type"": ""Button"",
                    ""id"": ""38083d41-98a4-4d6d-9dd3-f867cc8c7d49"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Card Upgrade"",
                    ""type"": ""Button"",
                    ""id"": ""b072291f-29f9-4ac5-b1f9-66177db6ff80"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point Card"",
                    ""type"": ""Value"",
                    ""id"": ""58d17c21-a148-4880-965a-b74d6eb3b77d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""End Turn"",
                    ""type"": ""Button"",
                    ""id"": ""8afda226-4626-494c-be6f-2c61a3361a84"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1234b3e9-9e34-4374-bd08-4b1dd6eb67bb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Card Play"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""991cff61-1657-44b0-bebb-1b0d739e3497"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Point Card"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""855ae29c-c689-4431-8db4-fe32a8e2e2d8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Card Upgrade"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6aeff9b-d208-4679-bfba-1ab965b8c70a"",
                    ""path"": ""<Keyboard>/delete"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""End Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Targeting"",
            ""id"": ""50a84517-bfb1-4976-81a2-deaea10a903b"",
            ""actions"": [
                {
                    ""name"": ""Pick Card"",
                    ""type"": ""Button"",
                    ""id"": ""98605931-6878-4a6a-9ca0-99d501543e7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point Card"",
                    ""type"": ""Value"",
                    ""id"": ""e6c2a93c-f1d7-4f92-8a2e-d79788da5267"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""35f81c79-de8b-40f0-84ac-bd417affb7f1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Pick Card"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c3ac4f0-6301-4a1b-a57a-efcc1c250af8"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Point Card"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard & Mouse"",
            ""bindingGroup"": ""Keyboard & Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Main
        m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
        m_Main_CardPlay = m_Main.FindAction("Card Play", throwIfNotFound: true);
        m_Main_CardUpgrade = m_Main.FindAction("Card Upgrade", throwIfNotFound: true);
        m_Main_PointCard = m_Main.FindAction("Point Card", throwIfNotFound: true);
        m_Main_EndTurn = m_Main.FindAction("End Turn", throwIfNotFound: true);
        // Targeting
        m_Targeting = asset.FindActionMap("Targeting", throwIfNotFound: true);
        m_Targeting_PickCard = m_Targeting.FindAction("Pick Card", throwIfNotFound: true);
        m_Targeting_PointCard = m_Targeting.FindAction("Point Card", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Main
    private readonly InputActionMap m_Main;
    private IMainActions m_MainActionsCallbackInterface;
    private readonly InputAction m_Main_CardPlay;
    private readonly InputAction m_Main_CardUpgrade;
    private readonly InputAction m_Main_PointCard;
    private readonly InputAction m_Main_EndTurn;
    public struct MainActions
    {
        private @PlayerActions m_Wrapper;
        public MainActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @CardPlay => m_Wrapper.m_Main_CardPlay;
        public InputAction @CardUpgrade => m_Wrapper.m_Main_CardUpgrade;
        public InputAction @PointCard => m_Wrapper.m_Main_PointCard;
        public InputAction @EndTurn => m_Wrapper.m_Main_EndTurn;
        public InputActionMap Get() { return m_Wrapper.m_Main; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
        public void SetCallbacks(IMainActions instance)
        {
            if (m_Wrapper.m_MainActionsCallbackInterface != null)
            {
                @CardPlay.started -= m_Wrapper.m_MainActionsCallbackInterface.OnCardPlay;
                @CardPlay.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnCardPlay;
                @CardPlay.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnCardPlay;
                @CardUpgrade.started -= m_Wrapper.m_MainActionsCallbackInterface.OnCardUpgrade;
                @CardUpgrade.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnCardUpgrade;
                @CardUpgrade.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnCardUpgrade;
                @PointCard.started -= m_Wrapper.m_MainActionsCallbackInterface.OnPointCard;
                @PointCard.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnPointCard;
                @PointCard.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnPointCard;
                @EndTurn.started -= m_Wrapper.m_MainActionsCallbackInterface.OnEndTurn;
                @EndTurn.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnEndTurn;
                @EndTurn.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnEndTurn;
            }
            m_Wrapper.m_MainActionsCallbackInterface = instance;
            if (instance != null)
            {
                @CardPlay.started += instance.OnCardPlay;
                @CardPlay.performed += instance.OnCardPlay;
                @CardPlay.canceled += instance.OnCardPlay;
                @CardUpgrade.started += instance.OnCardUpgrade;
                @CardUpgrade.performed += instance.OnCardUpgrade;
                @CardUpgrade.canceled += instance.OnCardUpgrade;
                @PointCard.started += instance.OnPointCard;
                @PointCard.performed += instance.OnPointCard;
                @PointCard.canceled += instance.OnPointCard;
                @EndTurn.started += instance.OnEndTurn;
                @EndTurn.performed += instance.OnEndTurn;
                @EndTurn.canceled += instance.OnEndTurn;
            }
        }
    }
    public MainActions @Main => new MainActions(this);

    // Targeting
    private readonly InputActionMap m_Targeting;
    private ITargetingActions m_TargetingActionsCallbackInterface;
    private readonly InputAction m_Targeting_PickCard;
    private readonly InputAction m_Targeting_PointCard;
    public struct TargetingActions
    {
        private @PlayerActions m_Wrapper;
        public TargetingActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PickCard => m_Wrapper.m_Targeting_PickCard;
        public InputAction @PointCard => m_Wrapper.m_Targeting_PointCard;
        public InputActionMap Get() { return m_Wrapper.m_Targeting; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TargetingActions set) { return set.Get(); }
        public void SetCallbacks(ITargetingActions instance)
        {
            if (m_Wrapper.m_TargetingActionsCallbackInterface != null)
            {
                @PickCard.started -= m_Wrapper.m_TargetingActionsCallbackInterface.OnPickCard;
                @PickCard.performed -= m_Wrapper.m_TargetingActionsCallbackInterface.OnPickCard;
                @PickCard.canceled -= m_Wrapper.m_TargetingActionsCallbackInterface.OnPickCard;
                @PointCard.started -= m_Wrapper.m_TargetingActionsCallbackInterface.OnPointCard;
                @PointCard.performed -= m_Wrapper.m_TargetingActionsCallbackInterface.OnPointCard;
                @PointCard.canceled -= m_Wrapper.m_TargetingActionsCallbackInterface.OnPointCard;
            }
            m_Wrapper.m_TargetingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @PickCard.started += instance.OnPickCard;
                @PickCard.performed += instance.OnPickCard;
                @PickCard.canceled += instance.OnPickCard;
                @PointCard.started += instance.OnPointCard;
                @PointCard.performed += instance.OnPointCard;
                @PointCard.canceled += instance.OnPointCard;
            }
        }
    }
    public TargetingActions @Targeting => new TargetingActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard & Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IMainActions
    {
        void OnCardPlay(InputAction.CallbackContext context);
        void OnCardUpgrade(InputAction.CallbackContext context);
        void OnPointCard(InputAction.CallbackContext context);
        void OnEndTurn(InputAction.CallbackContext context);
    }
    public interface ITargetingActions
    {
        void OnPickCard(InputAction.CallbackContext context);
        void OnPointCard(InputAction.CallbackContext context);
    }
}
